TestLuaBehaviour = {}

local _fixedUpdateCoroutine = nil
local _lateUpdateCurrentTime = 0
local _isUnsupportCoroutine = false

function TestLuaBehaviour.Start()
    print("lua start...")
end

function TestLuaBehaviour.FixedUpdate()
    if _isUnsupportCoroutine then
        return
    end

    if (nil ~= _fixedUpdateCoroutine) then
        return
    end

    try {
        -- try 代码块
        function()
            _fixedUpdateCoroutine =
                cs_coroutine.start(
                function()
                    print("coroutine OnFixedUpdate started")
                    coroutine.yield(CS.UnityEngine.WaitForSeconds(1))
                    print("coroutine OnFixedUpdate end")
                end
            )
        end,
        -- catch 代码块
        catch {
            -- 发生异常后，被执行
            function(errors)
                _isUnsupportCoroutine = true
                error("如果要使用cs_coroutine，则需要在Unity点击菜单生成脚本(XLua/Generate Code)")
            end
        }
    }
end

function TestLuaBehaviour.LateUpdate()
    _lateUpdateCurrentTime = _lateUpdateCurrentTime + CS.UnityEngine.Time.deltaTime

    if _lateUpdateCurrentTime >= 10.0 then
        _lateUpdateCurrentTime = 0
        print("LateUpdate test")
    end
end

function TestLuaBehaviour.Awake()
    print("Awake test" .. tostring(self.customValue))
end

function TestLuaBehaviour.OnEnable()
    print("OnEnable test")
end

function TestLuaBehaviour.OnDisable()
    print("OnDisable test")
end

function TestLuaBehaviour.Update()
    local r = CS.UnityEngine.Vector3.up * CS.UnityEngine.Time.deltaTime * 5
    self.rotateTarget.transform:Rotate(r)
end

function TestLuaBehaviour.OnDestroy()
    print("OnDestroy test")
end

function TestLuaBehaviour.OnGUI()
    CS.UnityEngine.GUILayout.Space(CS.UnityEngine.Screen.height / 4)

    CS.UnityEngine.GUILayout.BeginHorizontal()
    CS.UnityEngine.GUILayout.Space(CS.UnityEngine.Screen.width / 2)
    if CS.UnityEngine.GUILayout.Button("lua bubton") then
        print("click lua gui button" .. tostring(self.transform:ToString()))
        local argTmp = CS.shaco.Test.TestArg()
        argTmp.message = "lua test"
        shaco.lua.UIManager.OpenUI(typeof(CS.shaco.Test.TestUI_3), argTmp)
    end
    CS.UnityEngine.GUILayout.EndHorizontal()
end

---@param arg CS.shaco.Base.BaseEventArg
function TestLuaBehaviour.OnUIPreLoad()
    print("OnUIPreLoad test")
end

function TestLuaBehaviour.OnUIInit(arg)
    print("OnUIInit test=" .. tostring(arg.message or "nil"))
end

function TestLuaBehaviour.OnUIOpen(arg)
    print("OnUIOpen test=" .. tostring(arg.message or "nil"))
end

function TestLuaBehaviour.OnUIHide()
    print("OnUIHide test")
end

function TestLuaBehaviour.OnUIResume()
    print("OnUIResume test")
end

function TestLuaBehaviour.OnUIClose()
    print("OnUIClose test")
end

function TestLuaBehaviour.OnUIRefresh(arg)
    print("OnUIRefresh test=" .. tostring(arg.message or "nil"))
end

function TestLuaBehaviour.OnUIBringToFront(arg)
    print("OnUIBringToFront test")
end
