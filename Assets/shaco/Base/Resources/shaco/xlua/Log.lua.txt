-- <summary>
-- 获取堆栈信息
-- <param name="startStackLevel">堆栈信息开始下标</param>
-- <param name="maxStackLevel">最大堆栈信息显示层数</param>
-- <return>堆栈信息(string)</return>
-- </summary>
local function GetStackInfo(startStackLevel, maxStackLevel)
    --没开启打印堆栈日志的时候默认返回空字段
    if (false == G_isShowTraceback) then
        return ""
    end

    local retValue = "\nstack traceback:\n"

    --0表示getinfo本身,1表示调用getinfo的函数(printCallStack),2表示调用printCallStack的函数,可以想象一个getinfo(0级)在顶的栈.
    startStackLevel = startStackLevel or 3

    --最大递归10层
    maxStackLevel = maxStackLevel or 10

    for level = startStackLevel, maxStackLevel do
        -- 打印堆栈每一层
        local info = debug.getinfo(level, "nSl")

        --获取信息失败跳出循环
        if info == nil then
            break
        end

        local sourceCheck = nil
        if level == startStackLevel then
            sourceCheck = CS.shaco.XLuaManager.GetLuaScriptPath(info.source, info.currentline)
        else
            sourceCheck = info.source .. ":" .. info.currentline
        end
        retValue = retValue .. "\t" .. sourceCheck .. " in function " .. (info.name or "nil") .. "("

        -- 打印该层的参数与局部变量
        local index = 1 --1表示第一个参数或局部变量, 依次类推
        local hasParam = false
        while true do
            local name, value = debug.getlocal(level, index)
            if name == nil then
                break
            end

            local valueType = type(value)
            local valueStr
            if valueType == "string" then
                valueStr = value
            elseif valueType == "number" then
                valueStr = string.format("%.2f", value)
            end
            if valueStr ~= nil then
                --如果参数长度超过32字节，则不显示
                if (#valueStr > 32) then
                    valueStr = "..."
                end

                retValue = retValue .. string.format("%s=%s ", name, valueStr)
                hasParam = true
            end
            index = index + 1
        end

        if (hasParam) then
            retValue = string.sub(retValue, 1, -1)
        end

        retValue = retValue .. ")\n"
    end

    return retValue
end

local function OutputMessage(funcOutput, isError, ...)
    local isDebugLog = CS.shaco.Base.GlobalParams.DEBUG_LOG ~= nil and true == CS.shaco.Base.GlobalParams.DEBUG_LOG
    if isError == false then
        if isDebugLog == false then
            return
        end
    end

    local message = ""
    local args = {...}

    for index, value in ipairs(args) do
        message = message .. tostring(value) .. "\t"
    end

    if isDebugLog == true then
        funcOutput(message .. GetStackInfo(4))
    else
        funcOutput(message)
    end
end

--带堆栈信息的异常排除
function error(...)
    OutputMessage(CS.UnityEngine.Debug.LogAssertion, true, ...)
end

--带堆栈信息日志打印
function print(...)
    OutputMessage(CS.UnityEngine.Debug.Log, false, ...)
end

--带堆栈警告日志打印
function printWarning(...)
    OutputMessage(CS.UnityEngine.Debug.LogWarning, false, ...)
end

--带颜色的信息日志打印
function printcolor(...)
    if (CS.shaco.Base.GlobalParams.DEBUG_LOG == nil or false == CS.shaco.Base.GlobalParams.DEBUG_LOG) then
        return
    end
    local message = ""
    local color = nil
    local args = {...}

    local startWithString = function(String, Start)
        return string.sub(String, 1, string.len(Start)) == Start
    end

    for index, value in ipairs(args) do
        if (startWithString(tostring(value), "RGBA(")) then
            color = value
        else
            message = message .. tostring(value) .. "\t"
        end
    end

    color = color or CS.UnityEngine.Color.white
    local MakeRichtextLog = function(message, color)
        local r = CS.System.Convert.ToString((color.r * 255), 16)
        if (#r == 1) then
            r = r .. "0"
        end
        local g = CS.System.Convert.ToString((color.g * 255), 16)
        if (#g == 1) then
            g = g .. "0"
        end
        local b = CS.System.Convert.ToString((color.b * 255), 16)
        if (#b == 1) then
            b = b .. "0"
        end
        local a = CS.System.Convert.ToString((color.a * 255), 16)
        if (#a == 1) then
            a = a .. "0"
        end
        local retValue = CS.System.String.Format("<color=#{0}>{1}</color>", (r .. g .. b .. a), message)
        return retValue
    end
    CS.UnityEngine.Debug.Log("LUA:" .. MakeRichtextLog(message, color) .. GetStackInfo())
end

--打印lua的table信息
function printtable(t)
    local print_r_cache = {}
    local function sub_print_r(t, indent)
        if (print_r_cache[tostring(t)]) then
            print(indent .. "*" .. tostring(t))
        else
            print_r_cache[tostring(t)] = true
            if (type(t) == "table") then
                for pos, val in pairs(t) do
                    if (type(val) == "table") then
                        print(indent .. "[" .. pos .. "] => " .. tostring(t) .. " {")
                        sub_print_r(val, indent .. string.rep(" ", string.len(pos) + 8))
                        print(indent .. string.rep(" ", string.len(pos) + 6) .. "}")
                    elseif (type(val) == "string") then
                        print(indent .. "[" .. pos .. '] => "' .. val .. '"')
                    else
                        print(indent .. "[" .. pos .. "] => " .. tostring(val))
                    end
                end
            else
                print(indent .. tostring(t))
            end
        end
    end
    if (type(t) == "table") then
        print(tostring(t) .. " {")
        sub_print_r(t, "  ")
        print("}")
    else
        sub_print_r(t, "  ")
    end
end
