using System.Collections;
using System.Collections.Generic;

/// <summary>
/// 该类由shaco.Execel+Serializable.cs脚本自动生成，请勿手动修改
/// </summary>
namespace ##NameSpaceName##
{
	public class __ClassName__ : ##InheritedName##
	{
		public class RowData 
		{
			##RowDataParmeters##
			public RowData(##ConstructionParameters##)
			{
				##ConstructionFunction##
			}

			public RowData() { }

			public RowData Clone()
			{
				var cloneData = new RowData();
				##RowDataCloneFunction##
				return cloneData;
			}
		}

        static public int Count { get { return shaco.Base.ExcelHelper.GetExcelData<__ClassName__>()._rowDatas.Count; } }
        static public __ClassName__ Instance { get { return shaco.Base.ExcelHelper.GetExcelData<__ClassName__>(); } }

		private Dictionary<##KeyType##, RowData> _rowDatas = new Dictionary<##KeyType##, RowData>();

		static public RowData Get(##KeyType## key)
		{
			var data = CheckInit();
			if (!data._rowDatas.ContainsKey(key))
			{
				shaco.Base.Log.Error("__ClassName__ Get error: not found, key=" + key + " count=" + data._rowDatas.Count);
				return null;
			}
			return data._rowDatas[key];
		}

		static public bool ContainsKey(##KeyType## key)
		{
            var data = CheckInit();
			return data._rowDatas.ContainsKey(key);
        }

		static public void Foreach(System.Func<##KeyType##, RowData, bool> callback)
		{
			var data = CheckInit();
            using (var en = data.GetEnumerator())
			{
				while (en.MoveNext())
				{
                    if (!callback(en.Current.Key, en.Current.Value))
						break;
				}
			}
		}
		
		public IEnumerator<KeyValuePair<##KeyType##, RowData>> GetEnumerator()
		{
			if (0 == _rowDatas.Count) UpdateData();
            using (var en = _rowDatas.GetEnumerator())
			{
				while (en.MoveNext())
				{
					yield return en.Current;
				}
			}
		}

		public void CheckInitAsync(System.Action<float> callbackProgress = null)
		{
            if (0 < _rowDatas.Count)
			{
				if (null != callbackProgress)
					callbackProgress(1.0f);
				return;
			}

            shaco.ExcelHelper.OpenResourcesOrLocalAsync(##ConfigPath##, (excelData) =>
			{
				if (null == excelData)
				{
					if (null != callbackProgress)
						callbackProgress(1.0f);
					return;
				}

				int rows = excelData.GetTabelDataRowCount();
				int index = 0;

#if UNITY_WEBGL
				shaco.Base.Coroutine.ForeachCount(rows,
#else
                shaco.Base.Coroutine.ForeachCountAsync(rows, 
#endif
				() =>
				{
                    this.UpdateDataOnce(excelData, index++);
					return true;
				}, (percent2) =>
				{
                    if (null != callbackProgress)
					{
                        callbackProgress(percent2 * 0.7f + 0.3f);
					}
#if UNITY_WEBGL
				}, ExcelHelper.DEFAULT_WEBGL_LOAD_ASYNC_SPEED);
#else
				});
#endif
                }, (percent) =>
			{
				if (null != callbackProgress)
                    callbackProgress(percent * 0.3f);
			});
        }

		private void UpdateData()
		{
			var excelData = shaco.ExcelHelper.OpenResourcesOrLocal(##ConfigPath##);
			if (null != excelData)
			{
				int rows = excelData.GetTabelDataRowCount();
				for (int i = 0; i < rows; ++i)
				{
                    UpdateDataOnce(excelData, i);
				}
                shaco.ExcelHelper.CloseResourcesOrLocal(excelData, ##ConfigPath##);
			}
		}

		private void UpdateDataOnce(shaco.Base.ExcelData excelData, int i)
		{
            if (!excelData.IsIgnoreRowData(i))
			{
				RowData newData = null;
				try
				{
					##GetRowDataFunction##

					newData = new RowData
					(
						##ExcelDataUpdateFunction##
					);
					if (_rowDatas.ContainsKey(newData.##KeyParamName##))
						shaco.Base.Log.Error("[__ClassName__] UpdateDataOnce error: has dulicate key=" + newData.##KeyParamName##);
					else
						_rowDatas.Add(newData.##KeyParamName##, newData);
				}
				catch (System.Exception e)
				{
					shaco.Base.Log.Error("[__ClassName__] UpdateDataOnce error: index=" + i + " key=" + (null == newData##KeyJudgementNull## ? "null" : newData.##KeyParamName##.ToString()) + " e=" + e);
				}
			}
		}

		static private __ClassName__ CheckInit()
		{
            var retValue = shaco.Base.ExcelHelper.GetExcelData<__ClassName__>();
            if (0 == retValue._rowDatas.Count) 
				retValue.UpdateData();
			return retValue;
		}
	}
}